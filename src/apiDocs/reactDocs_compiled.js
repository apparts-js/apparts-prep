

module.exports = "const ReactMarkdown = window.ReactMarkdown;\nconst remarkGfm = window.remarkGfm;\nconst SyntaxHighlighter = window.SyntaxHighlighter;\nconst stackoverflowLight = window.stackoverflowLight;\n\nconst Markdown = (props) => (\n  <ReactMarkdown\n    remarkPlugins={[remarkGfm]}\n    components={{\n      code({ node, inline, className, children, ...props }) {\n        const match = /language-(\\w+)/.exec(className || \"\");\n        return !inline && match ? (\n          <SyntaxHighlighter\n            style={stackoverflowLight}\n            customStyle={{ padding: 0 }}\n            children={String(children).replace(/\\n$/, \"\")}\n            language={match[1]}\n            {...props}\n          />\n        ) : (\n          <code className={className} {...props}>\n            {children}\n          </code>\n        );\n      },\n    }}\n    {...props}\n  />\n);\n\nconst TocLine = ({ route }) => {\n  const { path, title, version, method } = route,\n    id = `${method}_${path}`,\n    methodText = method.toUpperCase();\n\n  return (\n    <a href={`#${id}`}>\n      <span className=\"version\">{version ? \"v\" + version : \"\"}</span>\n      <span className=\"link\">{title || \"\"}</span>\n      <br />\n      &nbsp;&nbsp;<span className=\"method\">{methodText}</span>\n      <code>{path}</code>\n    </a>\n  );\n};\nconst TocSection = ({ id, name, section, routes }) => {\n  return (\n    <React.Fragment>\n      <a href={`#${id}`} style={{ fontWeight: \"bold\" }}>\n        {name} {section.title}\n      </a>\n      <div style={{ paddingLeft: 20 }}>\n        {getRoutesForSection(routes, \"\" + id).map((route) => (\n          <TocLine key={route.method + \"-\" + route.path} route={route} />\n        ))}\n        {(section.subsections || []).map((section, i) => (\n          <TocSection\n            key={id + \".\" + i}\n            id={id + \".\" + i}\n            name={name + \".\" + (i + 1)}\n            section={section}\n            routes={routes}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n};\n\nconst Toc = ({ sections, routes }) => (\n  <div className=\"toc\">\n    <h2 style={{ marginLeft: 20 }}>Contents:</h2>\n\n    {sections.map((section, i) => (\n      <TocSection\n        key={i}\n        name={i + 1}\n        id={i}\n        section={section}\n        routes={routes}\n      />\n    ))}\n    {getRoutesForSection(routes).map((route) => (\n      <TocLine key={route.method + \"-\" + route.path} route={route} />\n    ))}\n  </div>\n);\n\nconst brakeLines = (text, lineLength) => {\n  if (!text || text.length <= 0) {\n    return [];\n  }\n  const line = text.slice(0, lineLength);\n  const lineUntilBrake = line\n    .split(\"\")\n    .reverse()\n    .reduce((a, b) => (a.length > 0 ? a + b : b === \" \" ? b : \"\"), \"\")\n    .split(\"\")\n    .reverse()\n    .join(\"\");\n  if (lineUntilBrake.length > 0) {\n    const rest = text.slice(lineUntilBrake.length);\n    return [lineUntilBrake, ...brakeLines(rest, lineLength)];\n  } else {\n    const lines = text.split(\" \", 1);\n    return [\n      lines[0],\n      ...brakeLines(text.slice(lines[0].length + 1), lineLength),\n    ];\n  }\n};\n\nconst printDescription = ({ description }, indent, addSpace) => {\n  if (description) {\n    return (\n      (addSpace ? \"\\n\" : \"\") +\n      \" \".repeat(indent) +\n      \"/* \" +\n      brakeLines(description + \" */ \", 60).join(\"\\n\" + \" \".repeat(indent + 3)) +\n      \"\\n\"\n    );\n  } else {\n    return \"\";\n  }\n};\n\nconst htmlifyLines = (text) =>\n  text.replace(/\\n/g, \"<br/>\").replace(/ {2}/g, \"&nbsp;&nbsp;\");\n\nconst recursivelyPrintType = (type, indent = 0) => {\n  let res = \"\";\n  const spaces = \" \".repeat(indent);\n  if (type.type === \"object\") {\n    if (typeof type.keys === \"object\") {\n      res += `${type.optional ? \"? \" : \"\"}{\n${Object.keys(type.keys)\n  .map(\n    (key) =>\n      printDescription(type.keys[key], indent + 2, true) +\n      spaces +\n      `  \"${key}\": ${recursivelyPrintType(type.keys[key], indent + 2)}`\n  )\n  .join(\",\\n\")}\n${spaces}}`;\n    } else {\n      res += `${type.optional ? \"? \" : \"\"}{\n${spaces}  <span class=\"type\">&lt;/&gt;</span>: ${recursivelyPrintType(\n        type.values,\n        indent + 2\n      )}\n${spaces}}`;\n    }\n  } else if (type.type === \"array\") {\n    res += `${type.optional ? \"? \" : \"\"}[\n${printDescription(type.items, indent + 2)}${spaces}  ${recursivelyPrintType(\n      type.items,\n      indent + 2\n    )}\n${spaces}]`;\n  } else if (type.type === \"oneOf\") {\n    res += `${type.optional ? \"? \" : \"\"}(\n${type.alternatives\n  .map(\n    (alt) =>\n      printDescription(alt, indent + 2, true) +\n      spaces +\n      \"  \" +\n      recursivelyPrintType(alt, indent + 2)\n  )\n  .join(` |\\n`)}\n${spaces})`;\n  } else if (type.type) {\n    res += `${type.optional ? \"? \" : \"\"}<span class=\"type\">&lt;${\n      type.type\n    }&gt;</span>`;\n  } else {\n    res += JSON.stringify(type.value);\n  }\n  return htmlifyLines(res);\n};\n\nconst Type = ({ ...type }) => {\n  return (\n    <span\n      className=\"code\"\n      dangerouslySetInnerHTML={{ __html: recursivelyPrintType(type) }}\n    ></span>\n  );\n};\n\nconst getRoutesForSection = (routes, section) =>\n  routes.filter(({ options }) => options.section === section);\n\nconst Section = ({\n  title,\n  description,\n  subsections = [],\n  routes,\n  id,\n  name,\n}) => (\n  <section id={id}>\n    <h2>\n      {name} {title}\n    </h2>\n    <Markdown>{description}</Markdown>\n    {getRoutesForSection(routes, \"\" + id).map((route, i) => (\n      <Route key={i} route {...route} />\n    ))}\n    {subsections.map((section, i) => (\n      <Section\n        key={i}\n        {...section}\n        id={id + \".\" + i}\n        name={name + \".\" + (i + 1)}\n        routes={routes}\n      />\n    ))}\n  </section>\n);\n\nconst Route = ({\n  method = \"\",\n  path,\n  assertions = {},\n  returns = [],\n  description,\n  title,\n  options = {},\n}) => {\n  const [, version] = path.match(/v\\/?(\\d+)/) || [undefined, undefined];\n  return (\n    <section id={`${method}_${path}`}>\n      <h3>\n        <span className=\"version\">{version ? \"v\" + version : \"\"}</span> {title}\n      </h3>\n      <Markdown>{description}</Markdown>\n      <div className=\"api\">\n        <strong className=\"method\">{method.toUpperCase()}</strong>{\" \"}\n        <span className=\"path\">{path}</span>\n        <br />\n        <ul>\n          {options.auth && (\n            <li>\n              Header:\n              <ul>\n                <li>\n                  <code className=\"block\">Authorization: {options.auth}</code>\n                </li>\n              </ul>\n            </li>\n          )}\n\n          {Object.keys(assertions)\n            .filter((type) => Object.keys(assertions[type]).length > 0)\n            .map((type, i) => (\n              <li key={i}>\n                {type.slice(0, 1).toUpperCase() + type.slice(1)}: <br />\n                <ul>\n                  {Object.keys(assertions[type]).map((key) => (\n                    <li key={key}>\n                      <code className=\"block\">\n                        <span\n                          className=\"code\"\n                          dangerouslySetInnerHTML={{\n                            __html: htmlifyLines(\n                              printDescription(assertions[type][key], 0)\n                            ),\n                          }}\n                        ></span>\n                        {key}: <Type {...assertions[type][key]} />\n                        {assertions[type][key].default !== undefined\n                          ? ` (= ${JSON.stringify(\n                              assertions[type][key].default\n                            )})`\n                          : \"\"}\n                      </code>\n                    </li>\n                  ))}\n                </ul>\n              </li>\n            ))}\n        </ul>\n        <span className=\"returns\">Returns:</span> <br />\n        <ul>\n          {returns.map(({ status, error, ...rest }, i) => (\n            <li key={i}>\n              Status: {status}\n              <code className=\"block\">\n                {error ? (\n                  `{ \"error\": ${JSON.stringify(error)} }`\n                ) : (\n                  <Type {...rest} />\n                )}\n              </code>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  );\n};\n\nconst Api = ({ api }) => {\n  const { sections = [], routes = [] } = api;\n  return (\n    <div>\n      <div className=\"docs\">\n        <Toc sections={sections} routes={routes} />\n      </div>\n      <div className=\"docs\" style={{ paddingLeft: 10 }}>\n        <h1>{apiName}</h1>\n        {sections.map((section, i) => (\n          <Section key={i} {...section} id={i} name={i + 1} routes={routes} />\n        ))}\n        {getRoutesForSection(routes, undefined).map((route, i) => (\n          <Route key={i} {...route} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nwindow.onload = function () {\n  const domContainer = document.querySelector(\"#root\");\n  const root = ReactDOM.createRoot(domContainer);\n\n  root.render(\n    <div>\n      <Api api={api} apiName={apiName} />\n    </div>\n  );\n};\n";

