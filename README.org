#+TITLE: @apparts/prep
#+DATE: [2019-08-26 Mon]
#+AUTHOR: Philipp Uhl

This package provides type-checking for [[https://www.npmjs.com/package/express][express]] servers, test helpers
and documentation generation. The package has full Typescript support.

The type definitions used are from [[https://github.com/apparts-js/apparts-types][@apparts/types]].

* Configuration

Under the configuration name =types-config= the following options exist:
- ~bugreportEmail {string}~ :: An email address that will be shown in
     case of a bug.
- ~idType {string}~ :: Can be one of
  - ~string~
  - ~UUIDv4~
  - ~int~
  - A regular expression

More information on how to set this: [[https://github.com/apparts-js/apparts-config][@apparts/config]].


* Request Encoding

When requesting an API checked by @apparts/prep, make sure, the
following holds:

- The *body* is always expected to be in JSON format.
- The *path* parameters must never be empty (otherwise express can't
  route you correctly) and if the type used is an array, it must be
  JSON encoded.
- The *param* and *query* parameters must be URI encoded. If the =typeof=
  gives ="object"= on the value, the value must be JSON encoded, before
  URI encoding.

* Usage

The =preparator= function provides a wrapper around express routes. It
checks the types of the requests and handles errors.

The =preparator= function takes these arguments:
- =options <object>= ::
  - =title <string>= :: The title of the route (for documentation).
  - =?description <string>= :: A description of the route (for documentation).
  - =receives= :: The Format the request has to be in, to be
    accepted. The =body=, =query=, and =param= fields are optional and take
    key-value pairs where the values are types as described through
    type definitions according to [[https://github.com/apparts-js/apparts-types][@apparts/types]].
  - =returns <array>= :: All potential types that can be returned by
    the function (for documentation and for validation). More
    information in the section "Test API Types".
- =route <func>= :: A (async) function that receives as first parameter
  the request object from axios, that contains the parsed =body=, =query=,
  =params=. What the function returns will be returned to the client. If
  the function throws an HttpError, the result code is set accordingly
  and the HttpError.message will be returned. If the function throws
  anything else, a 500 server error will be produced.

#+BEGIN_SRC js
  const { boolean, value, obj, int, objValues } = require("@apparts/types");
  const { preparator, HttpError, httpErrorSchema } = require("@apparts/prep");

  const myEndpoint = preparator(
    {
      title: "Testendpoint for multiple purposes",
      description: `Behaves radically different, based on what
   the filter is.`,
      receives: {
        body: obj({
          name: string().default("no name").description("A name"),
        }),
        query: obj({
          filter: string().optional(),
          number: int().default(0),
        }),
        params: obj({
          id: int().semantic("id"),
        }),
      },
      returns: [
        value("ok"),
        httpErrorSchema(400, "Name too long"),
        obj({
          foo: value("really!").description("Some text"),
          boo: boolean(),
          kabaz: boolean().optional(),
          arr: array(
            obj({
              a: int(),
              c: obj({
                d: int(),
              }).optional(),
              e: int().optional(),
            }).description("Some array item text")
          ).description("This is an array"),
          objectWithUnknownKeys: objValues(int()).description(
            "Quod illo quos excepturi alias qui. Illo non laudantium commodi. Est quos consequatur debitis in. Iusto fugiat sunt sit. Dolorem quod eius sit non."
          ),
          objectWithUnknownKeysAndUnknownTypes: objValues(any()),
        }),
      ],
    },
    async ({ body: { name }, query: { filter }, params: { id } }) => {
      if (name.length > 100) {
        new HttpError(400, "Name too long");
      }
      // filter might not be defined, as it is optional
      if (filter) {
        // Return values are JSONified automatically!
        const resp = {
          arr: [{ a: 1 }, { a: 2 }],
          foo: "really!",
          boo: true,
          objectWithUnknownKeys: {
            baz: filter === "asstring" ? "77" : 77,
            boo: 99,
          },
          objectWithUnknownKeysAndUnknownTypes: {
            baz: 77,
            boo: false,
          },
        };
        if (filter === "kabazplz") {
          resp.kabaz = false;
        }
        return resp;
      }
      // This produces "ok" (literally, with the quotes)
      return "ok";
    });

  module.exports = { myEndpoint };
  // app.post("/v/1/endpoint/:id", myEndpoint);
#+END_SRC

** Sending other status codes then 200

Within the =route= function you can use the =HttpCode= class as follows:

#+BEGIN_SRC js
  const { preparator, HttpCode, httpCodeSchema } = require("@apparts/prep");
  const { obj, string } = require("@apparts/types");

  const myEndpoint = preparator({
    title: "Endpoint that handles responding",
    /* ...*/
    returns: [httpCodeSchema(304, obj({ "whatever": string() }))],
  }, async () => {
    const myData = { "whatever": "i want" };
    return new HttpCode(304, myData);
  });
#+END_SRC

** Sending HttpErrors

Within the =route= function you can use the =HttpError= class as follows:

#+BEGIN_SRC js
  const { preparator, HttpError, httpErrorSchema } = require("@apparts/prep");
  const { obj, string } = require("@apparts/types");

  const myEndpoint = preparator({
    title: "Endpoint that handles responding",
    /* ...*/
    returns: [
      httpErrorSchema(403, "Nope"),
      httpErrorSchema(400, "You specified that parameter wrong"),
      httpErrorSchema(404, "My element not found"),
      httpErrorSchema(412, "Want to throw"),
    ],
  }, async () => {
    return new HttpError(403, "Nope");
    // --> http-statuscode 403, body: { }

    // error with description
    return new HttpError(
      400,
      "You specified that parameter wrong",
      "Some dynamic info: " + somethingWrong);
    // --> http-statuscode 400, body: {
    //   error: "You specified that parameter wrong",
    //   description: "Some dynamic info: blub"
    // }

    // can be thrown
    throw new HttpError(412, "Want to throw");  
    // --> http-statuscode 412, body: { error: "Want to throw" }
  });
#+END_SRC

You can return or throw an error.

** Sending a response manually

Sometimes you want to handle the response yourself. In these cases you
can tell preparator to not send for you, using the =DontRespond= class.

Keep in mind that the preparator already did these calls for you:
#+BEGIN_SRC js
  res.setHeader("Content-Type", "application/json");
  res.status(200);
#+END_SRC

If you want other values, overwrite them by making the respective
calls on =res= yourself.

#+BEGIN_SRC js
  const { preparator, DontRespond } = require("@apparts/prep");
  
  const myEndpoint = preparator({
  title: "Endpoint that handles responding",
    /* ...*/
  }, async (req, res) => {
    // handle send by yourself
    res.send();
    return new DontRespond();
  });
#+END_SRC

If you use =res.send()= without returning an =DontResond= instance, you
will see error messages, that express cannot send after the response
has already been send.

** Error handling by =preperator=

- Should a request not match any of the type assertions as defined, the
  =preparator= will respond with a status code of 400 and this body:
  #+BEGIN_SRC json
  { "error": "Fieldmissmatch", "description": "<explanation>" }
  #+END_SRC
- Should the route throw an error that is not an [[https://github.com/phuhl/apparts-error][HttpError]], it catches
  the error and returns with a status code of 500 and this body
  (encoding: =text/plain=):
  #+BEGIN_EXAMPLE
  SERVER ERROR! <Uuid v1> Please consider sending this error-message along with a description of what happend and what you where doing to this email-address: <config.bugreportEmail>
  #+END_EXAMPLE
  Additionally a more complete error will be logged:
  - The error that was thrown will be logged as is.
  - A JSON encoded object (for automated collecting of errors) with
    these fields:
    - ID :: A Uuid v1 (that is the same as was returned to the client)
      for matching client-side errors with errors in the log.
    - USER :: The =Authorization= header
    - TRACE :: The stack trace of the error
    - REQUEST :: Object with
      - url :: The requesting url
      - method :: HTTP method used (e.g. POST)
      - ip :: Ip of client
      - ua :: User agent of client
  - If you want to control how the error is logged, pass to the
    preparator options a function as
    ~logError: (msg: string, req: ExpressRequest, res: ExpressResponse) => void~

** Authentication

The =@apparts/prep= package has a pre-build version that checks a JWT
for you.

Ideally, you use this functionality with the [[https://github.com/phuhl/apparts-login-server][@apparts/login-server]]
package, that provides all the necessary REST endpoints an extendable
user model and more.

For this, instead of =perperator= use the function
- =prepauthTokenJWT=

This function does all what the =preperator= function does /and/ the
authentication check.

*** Bearer Auth with =prepauthTokenJWT=

For this function, you need to install the package [[https://www.npmjs.com/package/jsonwebtoken][jsonwebtoken]].

#+BEGIN_SRC js
  const { prepauthTokenJWT } = require("@apparts/prep");

  // Create the user as described by the README of @apparts/model
  // and import it here:
  const { Users, User, NoUser } = require("../models/user");

  const WEBTOKENKEY = "...";

  const myEndpoint = prepauthTokenJWT(WEBTOKENKEY)(
    {
      // options as with preparator
    },
    async ({ /*body, params, query*/ }, jwtContent, response) => {
      // notice the second parameter: the content of your JWT
      return "ok";
    }
  );
#+END_SRC

Requests that shall successfully be granted access must have the
=Authorization= HTTP header with the content =Bearer <JWT>=.

The JWT must have a field =action= with the value ="login"=. The webtoken
key used on token generation must obviously match the one, that the
server is given in the code example above.

Endpoints that use =prepauthTokenJWT= can produce the following additional
responses:

- HTTP Status: 401, Body: ={ "error": "Unauthorized" }= :: The token is
  not present or the token does not have the necessary =action= field.
- HTTP Status: 401, Body: ={ "error": "Token invalid" }= :: The
  JWT is not properly formated or can not be validated against the
  webtoken key.

When using Typescript you can add a type to the =jwtContent= like this:
#+BEGIN_SRC js
  const myEndpoint = prepauthTokenJWT<MyJwtContent>(WEBTOKENKEY)(
    { /*...*/ },
    async (req, jwtContent /* of type MyJwtContent */, res) => {
      return "ok";
    }
  );
#+END_SRC

* Generate API documentation

Create a file =genApiDocs.js=:
#+BEGIN_SRC js
const addRoutes = require("./routes");
const express = require("express");
const {
  genApiDocs: { getApi, apiToHtml, apiToOpenApi },
} = require("@apparts/prep");

const app = express();
addRoutes(app);

const docs = apiToHtml(getApi(app));

// Also available: docs in the open api format
//const openApiDocs = apiToOpenApi(getApi(app));

console.log(docs);
#+END_SRC

Then, run:

#+BEGIN_SRC sh
node genApiDocs.js > api.html
#+END_SRC

See your Api-documentation in the generated =api.html= file.

* Test API Types

Use =checkType= to check that the returned data has the format that
you expect. Use =allChecked= to make sure, that all of your type
definitions have occurred at least once in your tests.

For =checkType=, you need to define a type definition for your
endpoint. You do that by assigning a =returns= array to the endpoint
function like shown above. The =returns= has the form of:

Object with:
- status :: Expected status code
- One of
  - error :: Expected error text, as returned by =HttpError= from the
    "@apparts/error" package
    - When an error key is used, the response will exclude the field
      =description= of the response body from the check. This allows
      to optionally put dynamic content into the =description= field, to
      elaborate further on the error
  - type :: A type as described in Section "Types".

Functions:
- =useChecks : <(functionContainer) => { checkType, allChecked}>= ::
  Returns the functions needed to perform checks 
  - Parameters:
    - =funktionContainer= <object> :: An object that contains the tested
      function under the key as specified in =functionName=
  - Returns:
    - Object with keys:
      - =checkType : <(response, functionName, options) => boolean>= :: Checks if
        type is allowed.
        - Parameters:
          - =response= :: The response, that should be checked
          - =functionName <string>= :: The name of the function
          - =options <object>= :: Optional options object
            - =explainError <boolean> = false= :: If true, prints an
              explanation on error.
        - Returns:
          - =true= :: Check passed
        - Throws:
          - An Error when checks have not passed
      - =allChecked : <(functionName) => boolean>= :: Check if all
        possible return combinations have been checked
        - Parameters:
          - =functionName <string>= :: The name of the function
        - Returns:
          - =true= :: All possible return combinations for the given
            function have been tested
        - Throws:
          - An Error when checks have not passed

#+BEGIN_SRC js
  const { useChecks } = require("@apparts/prep");
  const request = require("supertest");

  const myEndpoint = require("./myEndpoint");

  const { checkType, allChecked } = useChecks(myEndpoint);
  ///const app = ...;


  describe("myEndpoint", () => {
    const functionName = "myEndpoint";
    test("Test with default name", async () => {
      const response = await request(app).post("/v/1/endpoint/3");
      checkType(response, functionName);
      expect(response.statusCode).toBe(200);
      expect(response.body).toBe("ok");
    });
    test("Test with too long name", async () => {
      const response = await request(app).post("/v/1/endpoint/3")
        .send({ name: "x".repeat(200) });
      checkType(response, functionName);
      expect(response.statusCode).toBe(400);
    });
    test("Test with filter", async () => {
      const response = await request(app).post("/v/1/endpoint/3?filter=4");
      checkType(response, functionName);
      expect(response.statusCode).toBe(200);
      expect(response.body).toMatchObject({
        arr: [{ a: 1 }, { a: 2}],
        boo: true
      });
    });
    test("All possible responses tested", () => {
      allChecked(functionName);
    });
  });
#+END_SRC
